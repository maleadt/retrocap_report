Julia Version 1.3.1
Commit 2d5741174c (2019-12-30 21:36 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD Ryzen Threadripper 2990WX 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-6.0.1 (ORCJIT, znver1)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

 Resolving package versions...
 Installed Rmath_jll ──────────────────── v0.2.2+0
 Installed OpenBLAS_jll ───────────────── v0.3.7+7
 Installed StatsFuns ──────────────────── v0.9.4
 Installed QuadGK ─────────────────────── v2.3.1
 Installed NNlib ──────────────────────── v0.6.6
 Installed StatsBase ──────────────────── v0.32.2
 Installed Bijectors ──────────────────── v0.6.2
 Installed Roots ──────────────────────── v1.0.0
 Installed CompilerSupportLibraries_jll ─ v0.2.0+1
 Installed MappedArrays ───────────────── v0.2.2
 Installed DataAPI ────────────────────── v1.1.0
 Installed ArgCheck ───────────────────── v2.0.0
 Installed Arpack_jll ─────────────────── v3.5.0+2
 Installed Arpack ─────────────────────── v0.4.0
 Installed FillArrays ─────────────────── v0.8.5
 Installed Requires ───────────────────── v1.0.1
 Installed Rmath ──────────────────────── v0.6.1
 Installed SortingAlgorithms ──────────── v0.3.1
 Installed PDMats ─────────────────────── v0.9.12
 Installed Reexport ───────────────────── v0.2.0
 Installed Compat ─────────────────────── v3.8.0
 Installed DataStructures ─────────────── v0.17.10
 Installed SpecialFunctions ───────────── v0.10.0
 Installed Distributions ──────────────── v0.22.5
 Installed OrderedCollections ─────────── v1.1.0
 Installed OpenSpecFun_jll ────────────── v0.5.3+3
 Installed Missings ───────────────────── v0.4.3
 Installed BinaryProvider ─────────────── v0.5.8
  Updating `~/.julia/environments/v1.3/Project.toml`
  [76274a88] + Bijectors v0.6.2
  Updating `~/.julia/environments/v1.3/Manifest.toml`
  [dce04be8] + ArgCheck v2.0.0
  [7d9fca2a] + Arpack v0.4.0
  [68821587] + Arpack_jll v3.5.0+2
  [76274a88] + Bijectors v0.6.2
  [b99e7846] + BinaryProvider v0.5.8
  [34da2185] + Compat v3.8.0
  [e66e0078] + CompilerSupportLibraries_jll v0.2.0+1
  [9a962f9c] + DataAPI v1.1.0
  [864edb3b] + DataStructures v0.17.10
  [31c24e10] + Distributions v0.22.5
  [1a297f60] + FillArrays v0.8.5
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [872c559c] + NNlib v0.6.6
  [4536629a] + OpenBLAS_jll v0.3.7+7
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.1.0
  [90014a1f] + PDMats v0.9.12
  [1fd47b50] + QuadGK v2.3.1
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.1
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+0
  [f2b01f46] + Roots v1.0.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.0
  [2913bbd2] + StatsBase v0.32.2
  [4c63d2b9] + StatsFuns v0.9.4
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building NNlib → `~/.julia/packages/NNlib/FAI3o/deps/build.log`
   Testing Bijectors
 Resolving package versions...
 Installed DiffResults ────────── v1.0.2
 Installed NaNMath ────────────── v0.3.3
 Installed DiffRules ──────────── v1.0.1
 Installed Tracker ────────────── v0.2.6
 Installed Zygote ─────────────── v0.4.10
 Installed ForwardDiff ────────── v0.10.9
 Installed DistributionsAD ────── v0.4.6
 Installed Combinatorics ──────── v0.7.0
 Installed FunctionWrappers ───── v1.1.1
 Installed IntelOpenMP_jll ────── v2018.0.3+0
 Installed RecipesBase ────────── v0.8.0
 Installed FFTW ───────────────── v1.2.0
 Installed ArrayLayouts ───────── v0.1.5
 Installed StaticArrays ───────── v0.12.1
 Installed MacroTools ─────────── v0.5.4
 Installed ZygoteRules ────────── v0.2.0
 Installed ReverseDiff ────────── v1.1.0
 Installed IRTools ────────────── v0.3.1
 Installed AbstractFFTs ───────── v0.5.0
 Installed MKL_jll ────────────── v2019.0.117+2
 Installed Adapt ──────────────── v1.0.1
 Installed FFTW_jll ───────────── v3.3.9+4
 Installed CommonSubexpressions ─ v0.2.0
 Installed Polynomials ────────── v0.6.1
  Building FFTW → `~/.julia/packages/FFTW/qqcBj/deps/build.log`
    Status `/tmp/jl_26Zfmz/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [79e6a3ab] Adapt v1.0.1
  [dce04be8] ArgCheck v2.0.0
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+2
  [4c555306] ArrayLayouts v0.1.5
  [76274a88] Bijectors v0.6.2
  [b99e7846] BinaryProvider v0.5.8
  [861a8166] Combinatorics v0.7.0
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v3.8.0
  [e66e0078] CompilerSupportLibraries_jll v0.2.0+1
  [9a962f9c] DataAPI v1.1.0
  [864edb3b] DataStructures v0.17.10
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [31c24e10] Distributions v0.22.5
  [ced4e74d] DistributionsAD v0.4.6
  [7a1cc6ca] FFTW v1.2.0
  [f5851436] FFTW_jll v3.3.9+4
  [1a297f60] FillArrays v0.8.5
  [f6369f11] ForwardDiff v0.10.9
  [069b7b12] FunctionWrappers v1.1.1
  [7869d1d1] IRTools v0.3.1
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [856f044c] MKL_jll v2019.0.117+2
  [1914dd2f] MacroTools v0.5.4
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [872c559c] NNlib v0.6.6
  [77ba4419] NaNMath v0.3.3
  [4536629a] OpenBLAS_jll v0.3.7+7
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.1.0
  [90014a1f] PDMats v0.9.12
  [f27b6e38] Polynomials v0.6.1
  [1fd47b50] QuadGK v2.3.1
  [3cdcf5f2] RecipesBase v0.8.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [37e2e3b7] ReverseDiff v1.1.0
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+0
  [f2b01f46] Roots v1.0.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.0
  [90137ffa] StaticArrays v0.12.1
  [2913bbd2] StatsBase v0.32.2
  [4c63d2b9] StatsFuns v0.9.4
  [9f7883ad] Tracker v0.2.6
  [e88e6eb3] Zygote v0.4.10
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [4607b0f0] SuiteSparse  [`@stdlib/SuiteSparse`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
Test Summary: | Pass  Total
Interface     | 1298   1298
Test Summary: | Pass  Total
scalar        |  275    275
Test Summary: | Pass  Total
vector        |   82     82
Test Summary: | Pass  Total
matrix        |   22     22
Test Summary:       | Pass  Total
Dirichlet Jacobians |   20     20
Test Summary:       | Pass  Total
InvertibleBatchNorm |    7      7
Test Summary: | Pass  Total
PlanarLayer   |   13     13
Test Summary: | Pass  Total
RadialLayer   |   13     13
Test Summary: | Pass  Total
Flows         |    5      5
Test Summary: | Pass  Total
Permute       |   20     20

==================================================

Testing: Univariate discrete distributions

[ Info: Testing: Bernoulli
┌ Info: Testing: (a, b)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:94 =#
│         BetaBinomial(10, a, b)
└     end
┌ Info: Testing: (a, b)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:95 =#
│         BetaBinomial(10, a, b)
└     end
┌ Info: Testing: p->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:97 =#
│         Binomial(10, p)
└     end
┌ Info: Testing: p->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:98 =#
│         Binomial(10, p)
└     end
┌ Info: Testing: p->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:100 =#
│         Categorical(p / sum(p))
└     end
┌ Info: Testing: p->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:101 =#
│         Categorical(p / sum(p))
└     end
[ Info: Testing: Geometric
[ Info: Testing: NegativeBinomial
[ Info: Testing: Poisson
[ Info: Testing: Skellam
[ Info: Testing: PoissonBinomial
[ Info: Testing: TuringPoissonBinomial

==================================================

Testing: Univariate continuous distributions

[ Info: Testing: Arcsine
[ Info: Testing: Beta
[ Info: Testing: BetaPrime
[ Info: Testing: Biweight
[ Info: Testing: Cauchy
[ Info: Testing: Chi
[ Info: Testing: Chisq
[ Info: Testing: Cosine
[ Info: Testing: Epanechnikov
┌ Info: Testing: s->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:170 =#
│         Erlang(1, s)
└     end
[ Info: Testing: Exponential
[ Info: Testing: FDist
[ Info: Testing: Frechet
[ Info: Testing: Gamma
[ Info: Testing: GeneralizedExtremeValue
[ Info: Testing: GeneralizedPareto
[ Info: Testing: Gumbel
[ Info: Testing: InverseGamma
[ Info: Testing: InverseGaussian
[ Info: Testing: Kolmogorov
[ Info: Testing: Laplace
[ Info: Testing: Levy
┌ Info: Testing: (a, b)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:241 =#
│         LocationScale(a, b, Normal())
└     end
[ Info: Testing: Logistic
[ Info: Testing: LogitNormal
[ Info: Testing: LogNormal
[ Info: Testing: Normal
[ Info: Testing: NormalCanon
[ Info: Testing: NormalInverseGaussian
[ Info: Testing: Pareto
[ Info: Testing: PGeneralizedGaussian
[ Info: Testing: Rayleigh
[ Info: Testing: Semicircle
[ Info: Testing: SymTriangularDist
[ Info: Testing: TDist
[ Info: Testing: TriangularDist
[ Info: Testing: Triweight
┌ Info: Testing: (mu, sigma, l, u)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:316 =#
│         truncated(Normal(mu, sigma), l, u)
└     end
[ Info: Testing: Uniform
[ Info: Testing: TuringUniform
[ Info: Testing: VonMises
[ Info: Testing: Weibull

==================================================

Testing: Multivariate discrete distributions

┌ Info: Testing: p->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:358 =#
│         Multinomial(2, p / sum(p))
└     end
┌ Info: Testing: (var"##x#517",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Bernoulli(var"##x#517"), 2)
└     end
┌ Info: Testing: (var"##x#518",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Bernoulli(var"##x#518"), 2)
└     end
┌ Info: Testing: (var"##x#519", var"##x#520")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist((((a, b)->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:94 =#
│                     BetaBinomial(10, a, b)
│                 end))(var"##x#519", var"##x#520"), 2)
└     end
┌ Info: Testing: (var"##x#521",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(((p->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:97 =#
│                     Binomial(10, p)
│                 end))(var"##x#521"), 2)
└     end
┌ Info: Testing: (var"##x#522",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(((p->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:100 =#
│                     Categorical(p / sum(p))
│                 end))(var"##x#522"), 2)
└     end
┌ Info: Testing: (var"##x#523",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Geometric(var"##x#523"), 2)
└     end
┌ Info: Testing: (var"##x#524", var"##x#525")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(NegativeBinomial(var"##x#524", var"##x#525"), 2)
└     end
┌ Info: Testing: (var"##x#526",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Poisson(var"##x#526"), 2)
└     end
┌ Info: Testing: (var"##x#527", var"##x#528")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Skellam(var"##x#527", var"##x#528"), 2)
└     end
┌ Info: Testing: (var"##x#529",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(PoissonBinomial(var"##x#529"), 2)
└     end
┌ Info: Testing: (var"##x#530",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(TuringPoissonBinomial(var"##x#530"), 2)
└     end
┌ Info: Testing: (var"##x#531",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(Bernoulli(var"##x#531"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#532",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(Bernoulli(var"##x#532"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#533", var"##x#534")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill((((a, b)->begin
│                             #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:94 =#
│                             BetaBinomial(10, a, b)
│                         end))(var"##x#533", var"##x#534"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#535",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(((p->begin
│                             #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:97 =#
│                             Binomial(10, p)
│                         end))(var"##x#535"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#536",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(((p->begin
│                             #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:100 =#
│                             Categorical(p / sum(p))
│                         end))(var"##x#536"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#537",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(Geometric(var"##x#537"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#538", var"##x#539")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(NegativeBinomial(var"##x#538", var"##x#539"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#540",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(Poisson(var"##x#540"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#541", var"##x#542")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(Skellam(var"##x#541", var"##x#542"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#543",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(PoissonBinomial(var"##x#543"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#544",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(TuringPoissonBinomial(var"##x#544"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#545",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Bernoulli(var"##x#545"), 2)
└     end
┌ Info: Testing: (var"##x#546",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Bernoulli(var"##x#546"), 2)
└     end
┌ Info: Testing: (var"##x#547", var"##x#548")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist((((a, b)->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:94 =#
│                     BetaBinomial(10, a, b)
│                 end))(var"##x#547", var"##x#548"), 2)
└     end
┌ Info: Testing: (var"##x#549",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(((p->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:97 =#
│                     Binomial(10, p)
│                 end))(var"##x#549"), 2)
└     end
┌ Info: Testing: (var"##x#550",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(((p->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:100 =#
│                     Categorical(p / sum(p))
│                 end))(var"##x#550"), 2)
└     end
┌ Info: Testing: (var"##x#551",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Geometric(var"##x#551"), 2)
└     end
┌ Info: Testing: (var"##x#552", var"##x#553")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(NegativeBinomial(var"##x#552", var"##x#553"), 2)
└     end
┌ Info: Testing: (var"##x#554",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Poisson(var"##x#554"), 2)
└     end
┌ Info: Testing: (var"##x#555", var"##x#556")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Skellam(var"##x#555", var"##x#556"), 2)
└     end
┌ Info: Testing: (var"##x#557",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(PoissonBinomial(var"##x#557"), 2)
└     end
┌ Info: Testing: (var"##x#558",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(TuringPoissonBinomial(var"##x#558"), 2)
└     end
┌ Info: Testing: (var"##x#559",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(Bernoulli(var"##x#559"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#560",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(Bernoulli(var"##x#560"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#561", var"##x#562")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill((((a, b)->begin
│                             #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:94 =#
│                             BetaBinomial(10, a, b)
│                         end))(var"##x#561", var"##x#562"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#563",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(((p->begin
│                             #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:97 =#
│                             Binomial(10, p)
│                         end))(var"##x#563"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#564",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(((p->begin
│                             #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:100 =#
│                             Categorical(p / sum(p))
│                         end))(var"##x#564"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#565",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(Geometric(var"##x#565"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#566", var"##x#567")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(NegativeBinomial(var"##x#566", var"##x#567"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#568",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(Poisson(var"##x#568"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#569", var"##x#570")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(Skellam(var"##x#569", var"##x#570"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#571",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(PoissonBinomial(var"##x#571"), prod((2,))), 2))
└     end
┌ Info: Testing: (var"##x#572",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:27 =#
│         arraydist(reshape(fill(TuringPoissonBinomial(var"##x#572"), prod((2,))), 2))
└     end

==================================================

Testing: Multivariate continuous distributions

┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Arcsine(), 2)
└     end
┌ Info: Testing: (var"##x#573",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Arcsine(var"##x#573"), 2)
└     end
┌ Info: Testing: (var"##x#574", var"##x#575")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Arcsine(var"##x#574", var"##x#575"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Beta(), 2)
└     end
┌ Info: Testing: (var"##x#576",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Beta(var"##x#576"), 2)
└     end
┌ Info: Testing: (var"##x#577", var"##x#578")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Beta(var"##x#577", var"##x#578"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(BetaPrime(), 2)
└     end
┌ Info: Testing: (var"##x#579",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(BetaPrime(var"##x#579"), 2)
└     end
┌ Info: Testing: (var"##x#580", var"##x#581")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(BetaPrime(var"##x#580", var"##x#581"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Biweight(), 2)
└     end
┌ Info: Testing: (var"##x#582",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Biweight(var"##x#582"), 2)
└     end
┌ Info: Testing: (var"##x#583", var"##x#584")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Biweight(var"##x#583", var"##x#584"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Cauchy(), 2)
└     end
┌ Info: Testing: (var"##x#585",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Cauchy(var"##x#585"), 2)
└     end
┌ Info: Testing: (var"##x#586", var"##x#587")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Cauchy(var"##x#586", var"##x#587"), 2)
└     end
┌ Info: Testing: (var"##x#588",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Chi(var"##x#588"), 2)
└     end
┌ Info: Testing: (var"##x#589",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Chisq(var"##x#589"), 2)
└     end
┌ Info: Testing: (var"##x#590", var"##x#591")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Cosine(var"##x#590", var"##x#591"), 2)
└     end
┌ Info: Testing: (var"##x#592", var"##x#593")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Epanechnikov(var"##x#592", var"##x#593"), 2)
└     end
┌ Info: Testing: (var"##x#594",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(((s->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:170 =#
│                     Erlang(1, s)
│                 end))(var"##x#594"), 2)
└     end
┌ Info: Testing: (var"##x#595",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Exponential(var"##x#595"), 2)
└     end
┌ Info: Testing: (var"##x#596", var"##x#597")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(FDist(var"##x#596", var"##x#597"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Frechet(), 2)
└     end
┌ Info: Testing: (var"##x#598",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Frechet(var"##x#598"), 2)
└     end
┌ Info: Testing: (var"##x#599", var"##x#600")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Frechet(var"##x#599", var"##x#600"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Gamma(), 2)
└     end
┌ Info: Testing: (var"##x#601",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Gamma(var"##x#601"), 2)
└     end
┌ Info: Testing: (var"##x#602", var"##x#603")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Gamma(var"##x#602", var"##x#603"), 2)
└     end
┌ Info: Testing: (var"##x#604", var"##x#605", var"##x#606")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(GeneralizedExtremeValue(var"##x#604", var"##x#605", var"##x#606"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(GeneralizedPareto(), 2)
└     end
┌ Info: Testing: (var"##x#607", var"##x#608")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(GeneralizedPareto(var"##x#607", var"##x#608"), 2)
└     end
┌ Info: Testing: (var"##x#609", var"##x#610", var"##x#611")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(GeneralizedPareto(var"##x#609", var"##x#610", var"##x#611"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Gumbel(), 2)
└     end
┌ Info: Testing: (var"##x#612",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Gumbel(var"##x#612"), 2)
└     end
┌ Info: Testing: (var"##x#613", var"##x#614")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Gumbel(var"##x#613", var"##x#614"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(InverseGamma(), 2)
└     end
┌ Info: Testing: (var"##x#615",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(InverseGamma(var"##x#615"), 2)
└     end
┌ Info: Testing: (var"##x#616", var"##x#617")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(InverseGamma(var"##x#616", var"##x#617"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(InverseGaussian(), 2)
└     end
┌ Info: Testing: (var"##x#618",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(InverseGaussian(var"##x#618"), 2)
└     end
┌ Info: Testing: (var"##x#619", var"##x#620")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(InverseGaussian(var"##x#619", var"##x#620"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Kolmogorov(), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Laplace(), 2)
└     end
┌ Info: Testing: (var"##x#621",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Laplace(var"##x#621"), 2)
└     end
┌ Info: Testing: (var"##x#622", var"##x#623")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Laplace(var"##x#622", var"##x#623"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Levy(), 2)
└     end
┌ Info: Testing: (var"##x#624",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Levy(var"##x#624"), 2)
└     end
┌ Info: Testing: (var"##x#625", var"##x#626")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Levy(var"##x#625", var"##x#626"), 2)
└     end
┌ Info: Testing: (var"##x#627", var"##x#628")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist((((a, b)->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:241 =#
│                     LocationScale(a, b, Normal())
│                 end))(var"##x#627", var"##x#628"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Logistic(), 2)
└     end
┌ Info: Testing: (var"##x#629",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Logistic(var"##x#629"), 2)
└     end
┌ Info: Testing: (var"##x#630", var"##x#631")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Logistic(var"##x#630", var"##x#631"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(LogitNormal(), 2)
└     end
┌ Info: Testing: (var"##x#632",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(LogitNormal(var"##x#632"), 2)
└     end
┌ Info: Testing: (var"##x#633", var"##x#634")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(LogitNormal(var"##x#633", var"##x#634"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(LogNormal(), 2)
└     end
┌ Info: Testing: (var"##x#635",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(LogNormal(var"##x#635"), 2)
└     end
┌ Info: Testing: (var"##x#636", var"##x#637")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(LogNormal(var"##x#636", var"##x#637"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Normal(), 2)
└     end
┌ Info: Testing: (var"##x#638",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Normal(var"##x#638"), 2)
└     end
┌ Info: Testing: (var"##x#639", var"##x#640")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Normal(var"##x#639", var"##x#640"), 2)
└     end
┌ Info: Testing: (var"##x#641", var"##x#642")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(NormalCanon(var"##x#641", var"##x#642"), 2)
└     end
┌ Info: Testing: (var"##x#643", var"##x#644", var"##x#645", var"##x#646")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(NormalInverseGaussian(var"##x#643", var"##x#644", var"##x#645", var"##x#646"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Pareto(), 2)
└     end
┌ Info: Testing: (var"##x#647",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Pareto(var"##x#647"), 2)
└     end
┌ Info: Testing: (var"##x#648", var"##x#649")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Pareto(var"##x#648", var"##x#649"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(PGeneralizedGaussian(), 2)
└     end
┌ Info: Testing: (var"##x#650", var"##x#651", var"##x#652")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(PGeneralizedGaussian(var"##x#650", var"##x#651", var"##x#652"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Rayleigh(), 2)
└     end
┌ Info: Testing: (var"##x#653",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Rayleigh(var"##x#653"), 2)
└     end
┌ Info: Testing: (var"##x#654",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Semicircle(var"##x#654"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(SymTriangularDist(), 2)
└     end
┌ Info: Testing: (var"##x#655",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(SymTriangularDist(var"##x#655"), 2)
└     end
┌ Info: Testing: (var"##x#656", var"##x#657")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(SymTriangularDist(var"##x#656", var"##x#657"), 2)
└     end
┌ Info: Testing: (var"##x#658",)->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(TDist(var"##x#658"), 2)
└     end
┌ Info: Testing: (var"##x#659", var"##x#660")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Triweight(var"##x#659", var"##x#660"), 2)
└     end
┌ Info: Testing: (var"##x#661", var"##x#662", var"##x#663", var"##x#664")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist((((mu, sigma, l, u)->begin
│                     #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:316 =#
│                     truncated(Normal(mu, sigma), l, u)
│                 end))(var"##x#661", var"##x#662", var"##x#663", var"##x#664"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Uniform(), 2)
└     end
┌ Info: Testing: (var"##x#665", var"##x#666")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Uniform(var"##x#665", var"##x#666"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(TuringUniform(), 2)
└     end
┌ Info: Testing: (var"##x#667", var"##x#668")->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(TuringUniform(var"##x#667", var"##x#668"), 2)
└     end
┌ Info: Testing: ()->begin
│         #= /home/pkgeval/.julia/packages/Bijectors/8wEIv/test/ad/distributions.jl:23 =#
│         filldist(Weibull(), 2)
└     end
