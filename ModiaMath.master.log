Julia Version 1.4.0
Commit b8e9a9ecc6 (2020-03-21 16:36 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD Ryzen Threadripper 2990WX 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, znver1)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Missings â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.3
  Installed Reexport â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.0
  Installed ZygoteRules â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.0
  Installed OrderedCollections â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.0
  Installed IterativeSolvers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.3
  Installed InvertedIndices â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
  Installed MacroTools â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.5
  Installed ProgressLogging â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.2
  Installed ConstructionBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
  Installed Compat â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v3.8.0
  Installed FunctionWrappers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.1
  Installed DocStringExtensions â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.1
  Installed JSON â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.21.0
  Installed Sundials â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v3.9.0
  Installed CategoricalArrays â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.7.7
  Installed ProgressMeter â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.2.0
    Cloning [67ccffd1-116d-535b-ad39-76a8fd0cbf71] ModiaMath from https://github.com/ModiaSim/ModiaMath.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed ModiaMath â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.2
    Cloning [9a962f9c-6df0-11e9-0e5d-c546b8b5ee8a] DataAPI from https://github.com/JuliaData/DataAPI.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed DataAPI â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.0
    Cloning [bd369af6-aec1-5ad0-b16a-f7cc5008161c] Tables from https://github.com/JuliaData/Tables.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed Tables â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.3
    Cloning [2dfb63ee-cc39-5dd5-95bd-886bf059d720] PooledArrays from https://github.com/JuliaData/PooledArrays.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed PooledArrays â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.3
    Cloning [82899510-4779-5014-852e-03e436cf321d] IteratorInterfaceExtensions from https://github.com/queryverse/IteratorInterfaceExtensions.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed IteratorInterfaceExtensions â”€ v1.0.0
    Cloning [ae029012-a4dd-5104-9daa-d747884805df] Requires from https://github.com/MikeInnes/Requires.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed Requires â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.1
    Cloning [69de0a69-1ddd-5017-9359-2bf0b02dc9f0] Parsers from https://github.com/JuliaData/Parsers.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed Parsers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.12
    Cloning [1986cc42-f94f-5a68-af5c-568840ba703d] Unitful from https://github.com/PainterQubits/Unitful.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed Unitful â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
    Cloning [f2b01f46-fcfa-551c-844a-d8ac1e96c665] Roots from https://github.com/JuliaMath/Roots.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed Roots â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.1
    Cloning [a2af1166-a08f-5f64-846c-94a0d3cef48c] SortingAlgorithms from https://github.com/JuliaCollections/SortingAlgorithms.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed SortingAlgorithms â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.1
    Cloning [3cdcf5f2-1ef4-517c-9805-6587b60abb01] RecipesBase from https://github.com/JuliaPlots/RecipesBase.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed RecipesBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.0
    Cloning [88cd18e8-d9cc-4ea6-8889-5259c0d15c8b] ConsoleProgressMonitor from https://github.com/tkf/ConsoleProgressMonitor.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed ConsoleProgressMonitor â”€â”€â”€â”€â”€â”€ v0.1.2
    Cloning [e2d170a0-9d28-54be-80f0-106bbe20a464] DataValueInterfaces from https://github.com/queryverse/DataValueInterfaces.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed DataValueInterfaces â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
    Cloning [d360d2e6-b24c-11e9-a2a3-2a2ae2dbcce4] ChainRulesCore from https://github.com/JuliaDiff/ChainRulesCore.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed ChainRulesCore â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.7.1
    Cloning [1d6d02ad-be62-4b6b-8a6d-2f90e265016e] LeftChildRightSiblingTrees from https://github.com/JuliaCollections/LeftChildRightSiblingTrees.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed LeftChildRightSiblingTrees â”€â”€ v0.1.2
    Cloning [46d2c3a1-f734-5fdb-9937-b9b9aeba4221] MuladdMacro from https://github.com/JuliaDiffEq/MuladdMacro.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed MuladdMacro â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.2
    Cloning [1520ce14-60c1-5f80-bbc7-55ef81b5835c] AbstractTrees from https://github.com/JuliaCollections/AbstractTrees.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed AbstractTrees â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.2
    Cloning [a2a6695c-b41b-5b7d-aed9-dbfdeacea5d7] TreeViews from https://github.com/pfitzseb/TreeViews.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed TreeViews â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.0
    Cloning [4fba245c-0d91-5ea0-9b3e-6abc04ee57a9] ArrayInterface from https://github.com/JuliaDiffEq/ArrayInterface.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed ArrayInterface â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.6.1
    Cloning [5d786b92-1e48-4d6f-9151-6b4477ca9bed] TerminalLoggers from https://github.com/c42f/TerminalLoggers.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed TerminalLoggers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.1
    Cloning [a93c6f00-e57d-5684-b7b6-d8193f3e46c0] DataFrames from https://github.com/JuliaData/DataFrames.jl.git
[?25l    Fetching: [>                                        ]  0.0 %    Resolving Deltas: [=======>                                 ]  15.6 %[2K[?25h  Installed DataFrames â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.20.2
    Cloning [2b5f629d-d688-5b77-993f-72d75c75574e] DiffEqBase from https://github.com/JuliaDiffEq/DiffEqBase.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed DiffEqBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v6.25.0
    Cloning [e6f89c97-d47a-5376-807f-9c37f3926c36] LoggingExtras from https://github.com/oxinabox/LoggingExtras.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed LoggingExtras â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.0
    Cloning [f2c3362d-daeb-58d1-803e-2bc74f2840b4] RecursiveFactorization from https://github.com/YingboMa/RecursiveFactorization.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed RecursiveFactorization â”€â”€â”€â”€â”€â”€ v0.1.0
    Cloning [90137ffa-7385-5640-81b9-e52037218182] StaticArrays from https://github.com/JuliaArrays/StaticArrays.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed StaticArrays â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.12.1
    Cloning [b99e7846-7c00-51b0-8f62-c81ae34c0232] BinaryProvider from https://github.com/JuliaPackaging/BinaryProvider.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed BinaryProvider â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.8
    Cloning [864edb3b-99cc-5e75-8d2d-829cb0a9cfe8] DataStructures from https://github.com/JuliaCollections/DataStructures.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed DataStructures â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.17.10
    Cloning [d96e819e-fc66-5662-9728-84c9c7592b0a] Parameters from https://github.com/mauro3/Parameters.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed Parameters â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.12.0
    Cloning [731186ca-8d62-57ce-b412-fbd966d074cd] RecursiveArrayTools from https://github.com/JuliaDiffEq/RecursiveArrayTools.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed RecursiveArrayTools â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.1.0
    Cloning [3783bdb8-4a98-5b6b-af9a-565f29a5fe9c] TableTraits from https://github.com/queryverse/TableTraits.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h  Installed TableTraits â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
   Updating `~/.julia/environments/v1.4/Project.toml`
  [67ccffd1] + ModiaMath v0.5.2
   Updating `~/.julia/environments/v1.4/Manifest.toml`
  [1520ce14] + AbstractTrees v0.3.2
  [4fba245c] + ArrayInterface v2.6.1
  [b99e7846] + BinaryProvider v0.5.8
  [324d7699] + CategoricalArrays v0.7.7
  [d360d2e6] + ChainRulesCore v0.7.1
  [34da2185] + Compat v3.8.0
  [88cd18e8] + ConsoleProgressMonitor v0.1.2
  [187b0558] + ConstructionBase v1.0.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.10
  [e2d170a0] + DataValueInterfaces v1.0.0
  [2b5f629d] + DiffEqBase v6.25.0
  [ffbed154] + DocStringExtensions v0.8.1
  [069b7b12] + FunctionWrappers v1.1.1
  [41ab1584] + InvertedIndices v1.0.0
  [42fd0dbc] + IterativeSolvers v0.8.3
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [1d6d02ad] + LeftChildRightSiblingTrees v0.1.2
  [e6f89c97] + LoggingExtras v0.4.0
  [1914dd2f] + MacroTools v0.5.5
  [e1d29d7a] + Missings v0.4.3
  [67ccffd1] + ModiaMath v0.5.2
  [46d2c3a1] + MuladdMacro v0.2.2
  [bac558e1] + OrderedCollections v1.1.0
  [d96e819e] + Parameters v0.12.0
  [69de0a69] + Parsers v0.3.12
  [2dfb63ee] + PooledArrays v0.5.3
  [33c8b6b6] + ProgressLogging v0.1.2
  [92933f4c] + ProgressMeter v1.2.0
  [3cdcf5f2] + RecipesBase v0.8.0
  [731186ca] + RecursiveArrayTools v2.1.0
  [f2c3362d] + RecursiveFactorization v0.1.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.1
  [f2b01f46] + Roots v1.0.1
  [a2af1166] + SortingAlgorithms v0.3.1
  [90137ffa] + StaticArrays v0.12.1
  [c3572dad] + Sundials v3.9.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.3
  [5d786b92] + TerminalLoggers v0.1.1
  [a2a6695c] + TreeViews v0.3.0
  [1986cc42] + Unitful v1.0.0
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Building Sundials â†’ `~/.julia/packages/Sundials/S5Ws7/deps/build.log`
    Testing ModiaMath
Status `/tmp/jl_nbLEUa/Manifest.toml`
  [1520ce14] AbstractTrees v0.3.2
  [4fba245c] ArrayInterface v2.6.1
  [b99e7846] BinaryProvider v0.5.8
  [324d7699] CategoricalArrays v0.7.7
  [d360d2e6] ChainRulesCore v0.7.1
  [34da2185] Compat v3.8.0
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [187b0558] ConstructionBase v1.0.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.10
  [e2d170a0] DataValueInterfaces v1.0.0
  [2b5f629d] DiffEqBase v6.25.0
  [ffbed154] DocStringExtensions v0.8.1
  [069b7b12] FunctionWrappers v1.1.1
  [41ab1584] InvertedIndices v1.0.0
  [42fd0dbc] IterativeSolvers v0.8.3
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2
  [e6f89c97] LoggingExtras v0.4.0
  [1914dd2f] MacroTools v0.5.5
  [e1d29d7a] Missings v0.4.3
  [67ccffd1] ModiaMath v0.5.2
  [46d2c3a1] MuladdMacro v0.2.2
  [bac558e1] OrderedCollections v1.1.0
  [d96e819e] Parameters v0.12.0
  [69de0a69] Parsers v0.3.12
  [2dfb63ee] PooledArrays v0.5.3
  [33c8b6b6] ProgressLogging v0.1.2
  [92933f4c] ProgressMeter v1.2.0
  [3cdcf5f2] RecipesBase v0.8.0
  [731186ca] RecursiveArrayTools v2.1.0
  [f2c3362d] RecursiveFactorization v0.1.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [f2b01f46] Roots v1.0.1
  [a2af1166] SortingAlgorithms v0.3.1
  [90137ffa] StaticArrays v0.12.1
  [c3572dad] Sundials v3.9.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.3
  [5d786b92] TerminalLoggers v0.1.1
  [a2a6695c] TreeViews v0.3.0
  [1986cc42] Unitful v1.0.0
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [4607b0f0] SuiteSparse 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
 
Importing ModiaMath Version 0.5.2 (2019-07-10)
    PyPlot not available (plot commands will be ignored).
    Try to install PyPlot. See hints here:
    https://github.com/ModiaSim/ModiaMath.jl/wiki/Installing-PyPlot-in-a-robust-way.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... Next plot should give a warning:
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... result variables = 2Ã—4 DataFrames.DataFrame
â”‚ Row â”‚ name   â”‚ elType  â”‚ sizeOrValue â”‚ unit   â”‚
â”‚     â”‚ String â”‚ String  â”‚ String      â”‚ String â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ phi    â”‚ Float64 â”‚ (100,)      â”‚        â”‚
â”‚ 2   â”‚ time   â”‚ Float64 â”‚ (100,)      â”‚        â”‚
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... Next plot should give a warning:
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... Next plot should give a warning:
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... figure=4 is closed

... result variables = 
â”‚ Row â”‚ name   â”‚ elType  â”‚ sizeOrValue â”‚ unit   â”‚ info   â”‚
â”‚     â”‚ String â”‚ String  â”‚ String      â”‚ String â”‚ String â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ phi    â”‚ Float64 â”‚ (100,)      â”‚ rad    â”‚        â”‚
â”‚ 2   â”‚ r      â”‚ Float64 â”‚ (100, 3)    â”‚ m      â”‚        â”‚
â”‚ 3   â”‚ time   â”‚ Float64 â”‚ (100,)      â”‚ s      â”‚        â”‚
â”‚ 4   â”‚ w      â”‚ Float64 â”‚ (100,)      â”‚ rad/s  â”‚        â”‚
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... Next plot should give a warning:
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... Next plot should give a warning:
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... result variables = 7Ã—4 DataFrames.DataFrame
â”‚ Row â”‚ name        â”‚ elType  â”‚ sizeOrValue â”‚ unit     â”‚
â”‚     â”‚ String      â”‚ String  â”‚ String      â”‚ String   â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ open        â”‚ Bool    â”‚ false       â”‚          â”‚
â”‚ 2   â”‚ phi         â”‚ Float64 â”‚ (100,)      â”‚ rad      â”‚
â”‚ 3   â”‚ phi2        â”‚ Float64 â”‚ (100,)      â”‚ rad      â”‚
â”‚ 4   â”‚ phi_max     â”‚ Float64 â”‚ 1.1         â”‚ rad      â”‚
â”‚ 5   â”‚ phi_max_int â”‚ Int64   â”‚ 1           â”‚          â”‚
â”‚ 6   â”‚ time        â”‚ Float64 â”‚ (100,)      â”‚          â”‚
â”‚ 7   â”‚ w           â”‚ Float64 â”‚ (100,)      â”‚ rad s^-1 â”‚
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... result variables = 7Ã—4 DataFrames.DataFrame
â”‚ Row â”‚ name   â”‚ elType  â”‚ sizeOrValue â”‚ unit     â”‚
â”‚     â”‚ String â”‚ String  â”‚ String      â”‚ String   â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ phi    â”‚ Float64 â”‚ (100,)      â”‚ rad      â”‚
â”‚ 2   â”‚ phi2   â”‚ Float64 â”‚ (100,)      â”‚ rad      â”‚
â”‚ 3   â”‚ r      â”‚ Float64 â”‚ (100, 3)    â”‚          â”‚
â”‚ 4   â”‚ r2     â”‚ Float64 â”‚ (100, 11)   â”‚          â”‚
â”‚ 5   â”‚ time   â”‚ Float64 â”‚ (100,)      â”‚ s        â”‚
â”‚ 6   â”‚ w      â”‚ Float64 â”‚ (100,)      â”‚ rad s^-1 â”‚
â”‚ 7   â”‚ w2     â”‚ Float64 â”‚ (100,)      â”‚ rad s^-1 â”‚
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... result variables = 
â”‚ Row â”‚ name   â”‚ elType  â”‚ sizeOrValue â”‚ unit   â”‚ info   â”‚
â”‚     â”‚ String â”‚ String  â”‚ String      â”‚ String â”‚ String â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ phi    â”‚ Float64 â”‚ (100,)      â”‚ rad    â”‚        â”‚
â”‚ 2   â”‚ phi2   â”‚ Float64 â”‚ (100,)      â”‚ rad    â”‚        â”‚
â”‚ 3   â”‚ r      â”‚ Float64 â”‚ (100, 3)    â”‚ m      â”‚        â”‚
â”‚ 4   â”‚ time   â”‚ Float64 â”‚ (100,)      â”‚ s      â”‚        â”‚
â”‚ 5   â”‚ w      â”‚ Float64 â”‚ (100,)      â”‚ rad/s  â”‚        â”‚
â”‚ 6   â”‚ w2     â”‚ Float64 â”‚ (100,)      â”‚ rad/s  â”‚        â”‚
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... result variables = 5Ã—4 DataFrames.DataFrame
â”‚ Row â”‚ name   â”‚ elType  â”‚ sizeOrValue â”‚ unit   â”‚
â”‚     â”‚ String â”‚ String  â”‚ String      â”‚ String â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ phi1   â”‚ Float64 â”‚ (100,)      â”‚        â”‚
â”‚ 2   â”‚ phi2   â”‚ Float64 â”‚ (100,)      â”‚        â”‚
â”‚ 3   â”‚ time   â”‚ Float64 â”‚ (100,)      â”‚        â”‚
â”‚ 4   â”‚ w1     â”‚ Float64 â”‚ (100,)      â”‚        â”‚
â”‚ 5   â”‚ w2     â”‚ Float64 â”‚ (100,)      â”‚        â”‚
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.

... robot =    phi10 = 1.0
   phi20 = 2.0
   var10 = 3.0
   r0[1] = 1.0
   r0[2] = 2.0
   r0[3] = 3.0
   q0[1] = 0.5
   q0[2] = 0.5
   q0[3] = 0.0
   q0[4] = 0.7071067811865476

   rev1 = Revolute(
    phi = 1.0 rad
    w   = 0.0 rad/s
    a   = 22.200000000000003 rad/s^2
    tau = 0.0 N*m
   )

   rev2 = Revolute(
    phi = 2.0 rad
    w   = 0.0 rad/s
    a   = 44.400000000000006 rad/s^2
    tau = 0.0 N*m
   )

   var1 = 3.0 

   res1 = 0.0 

   frame = Revolute(
    r = [1.0, 2.0, 3.0] m
    q = [0.5, 0.5, 0.0, 0.7071067811865476] 
    v = [0.0, 0.0, 0.0] m/s
    w = [0.0, 0.0, 0.0] rad/s
    a = [0.0, 0.0, 0.0] m/s^2
    z = [0.0, 0.0, 0.0] rad/s^2
    f = [0.0, 0.0, 0.0] N
    t = [0.0, 0.0, 0.0] N*m
   )
   )

... Print variables of robot


variables: . Omitted printing of 11 columns
â”‚ Row â”‚ name            â”‚ ValueType                    â”‚ unit    â”‚ numericType â”‚
â”‚     â”‚ Symbol          â”‚ Symbol                       â”‚ String  â”‚ ModiaMatâ€¦   â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ time            â”‚ Float64                      â”‚ s       â”‚ TIME        â”‚
â”‚ 2   â”‚ rev1.phi        â”‚ Float64                      â”‚ rad     â”‚ XD_EXP      â”‚
â”‚ 3   â”‚ rev1.w          â”‚ Float64                      â”‚ rad/s   â”‚ XD_EXP      â”‚
â”‚ 4   â”‚ rev1.a          â”‚ Float64                      â”‚ rad/s^2 â”‚ DER_XD_EXP  â”‚
â”‚ 5   â”‚ rev1.tau        â”‚ Float64                      â”‚ N*m     â”‚ WR          â”‚
â”‚ 6   â”‚ rev2.phi        â”‚ Float64                      â”‚ rad     â”‚ XD_EXP      â”‚
â”‚ 7   â”‚ rev2.w          â”‚ Float64                      â”‚ rad/s   â”‚ XD_EXP      â”‚
â‹®
â”‚ 17  â”‚ frame.a         â”‚ SArray{Tuple{3},Float64,1,3} â”‚ m/s^2   â”‚ DER_XD_IMP  â”‚
â”‚ 18  â”‚ frame.z         â”‚ SArray{Tuple{3},Float64,1,3} â”‚ rad/s^2 â”‚ DER_XD_IMP  â”‚
â”‚ 19  â”‚ frame.f         â”‚ SArray{Tuple{3},Float64,1,3} â”‚ N       â”‚ WR          â”‚
â”‚ 20  â”‚ frame.t         â”‚ SArray{Tuple{3},Float64,1,3} â”‚ N*m     â”‚ WR          â”‚
â”‚ 21  â”‚ frame.residue_w â”‚ SArray{Tuple{3},Float64,1,3} â”‚         â”‚ FD_IMP      â”‚
â”‚ 22  â”‚ frame.residue_f â”‚ SArray{Tuple{3},Float64,1,3} â”‚         â”‚ FD_IMP      â”‚
â”‚ 23  â”‚ frame.residue_t â”‚ SArray{Tuple{3},Float64,1,3} â”‚         â”‚ FD_IMP      â”‚
â”‚ 24  â”‚ frame.residue_q â”‚ Float64                      â”‚         â”‚ FC          â”‚


x vector: 
â”‚ Row â”‚ x        â”‚ name     â”‚ fixed â”‚ start                     â”‚
â”‚     â”‚ Symbol   â”‚ Symbol   â”‚ Bool  â”‚ Unionâ€¦                    â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ x[1]     â”‚ rev1.phi â”‚ 1     â”‚ 1.0                       â”‚
â”‚ 2   â”‚ x[2]     â”‚ rev1.w   â”‚ 1     â”‚ 0.0                       â”‚
â”‚ 3   â”‚ x[3]     â”‚ rev2.phi â”‚ 1     â”‚ 2.0                       â”‚
â”‚ 4   â”‚ x[4]     â”‚ rev2.w   â”‚ 1     â”‚ 0.0                       â”‚
â”‚ 5   â”‚ x[5:7]   â”‚ frame.r  â”‚ 1     â”‚ [1.0, 2.0, 3.0]           â”‚
â”‚ 6   â”‚ x[8:11]  â”‚ frame.q  â”‚ 1     â”‚ [0.5, 0.5, 0.0, 0.707107] â”‚
â”‚ 7   â”‚ x[12:14] â”‚ frame.v  â”‚ 1     â”‚ [0.0, 0.0, 0.0]           â”‚
â”‚ 8   â”‚ x[15:17] â”‚ frame.w  â”‚ 1     â”‚ [0.0, 0.0, 0.0]           â”‚
â”‚ 9   â”‚ x[18]    â”‚ var1     â”‚ 0     â”‚ 3.0                       â”‚


copy to variables: 
â”‚ Row â”‚ source      â”‚ target     â”‚
â”‚     â”‚ Symbol      â”‚ Symbol     â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ x[1]        â”‚ rev1.phi   â”‚
â”‚ 2   â”‚ x[2]        â”‚ rev1.w     â”‚
â”‚ 3   â”‚ x[3]        â”‚ rev2.phi   â”‚
â”‚ 4   â”‚ x[4]        â”‚ rev2.w     â”‚
â”‚ 5   â”‚ x[5:7]      â”‚ frame.r    â”‚
â”‚ 6   â”‚ x[8:11]     â”‚ frame.q    â”‚
â”‚ 7   â”‚ x[12:14]    â”‚ frame.v    â”‚
â”‚ 8   â”‚ x[15:17]    â”‚ frame.w    â”‚
â”‚ 9   â”‚ x[18]       â”‚ var1       â”‚
â”‚ 10  â”‚ derx[8:11]  â”‚ frame.derq â”‚
â”‚ 11  â”‚ derx[12:14] â”‚ frame.a    â”‚
â”‚ 12  â”‚ derx[15:17] â”‚ frame.z    â”‚


copy to residue vector: 
â”‚ Row â”‚ source              â”‚ target         â”‚
â”‚     â”‚ Symbol              â”‚ Symbol         â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ derx[1] - rev1.w    â”‚ residue[1]     â”‚
â”‚ 2   â”‚ derx[2] - rev1.a    â”‚ residue[2]     â”‚
â”‚ 3   â”‚ derx[3] - rev2.w    â”‚ residue[3]     â”‚
â”‚ 4   â”‚ derx[4] - rev2.a    â”‚ residue[4]     â”‚
â”‚ 5   â”‚ derx[5:7] - frame.v â”‚ residue[5:7]   â”‚
â”‚ 6   â”‚ res1                â”‚ residue[8]     â”‚
â”‚ 7   â”‚ frame.residue_w     â”‚ residue[9:11]  â”‚
â”‚ 8   â”‚ frame.residue_f     â”‚ residue[12:14] â”‚
â”‚ 9   â”‚ frame.residue_t     â”‚ residue[15:17] â”‚
â”‚ 10  â”‚ frame.residue_q     â”‚ residue[18]    â”‚


copy to results: 
â”‚ Row â”‚ source     â”‚ target        â”‚ start                     â”‚
â”‚     â”‚ Symbol     â”‚ Symbol        â”‚ Unionâ€¦                    â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ time       â”‚ result[1]     â”‚ 0.0                       â”‚
â”‚ 2   â”‚ rev1.phi   â”‚ result[2]     â”‚ 1.0                       â”‚
â”‚ 3   â”‚ rev1.w     â”‚ result[3]     â”‚ 0.0                       â”‚
â”‚ 4   â”‚ rev1.a     â”‚ result[4]     â”‚ 0.0                       â”‚
â”‚ 5   â”‚ rev1.tau   â”‚ result[5]     â”‚ 0.0                       â”‚
â”‚ 6   â”‚ rev2.phi   â”‚ result[6]     â”‚ 2.0                       â”‚
â”‚ 7   â”‚ rev2.w     â”‚ result[7]     â”‚ 0.0                       â”‚
â‹®
â”‚ 12  â”‚ frame.q    â”‚ result[14:17] â”‚ [0.5, 0.5, 0.0, 0.707107] â”‚
â”‚ 13  â”‚ frame.derq â”‚ result[18:21] â”‚ [0.0, 0.0, 0.0, 0.0]      â”‚
â”‚ 14  â”‚ frame.v    â”‚ result[22:24] â”‚ [0.0, 0.0, 0.0]           â”‚
â”‚ 15  â”‚ frame.w    â”‚ result[25:27] â”‚ [0.0, 0.0, 0.0]           â”‚
â”‚ 16  â”‚ frame.a    â”‚ result[28:30] â”‚ [0.0, 0.0, 0.0]           â”‚
â”‚ 17  â”‚ frame.z    â”‚ result[31:33] â”‚ [0.0, 0.0, 0.0]           â”‚
â”‚ 18  â”‚ frame.f    â”‚ result[34:36] â”‚ [0.0, 0.0, 0.0]           â”‚
â”‚ 19  â”‚ frame.t    â”‚ result[37:39] â”‚ [0.0, 0.0, 0.0]           â”‚

... Copy start values to x

... Copy x and der_x to variables

... Copy variables to residues
residue = [0.0, -3.552713678800501e-15, 0.0, -7.105427357601002e-15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

... robot2 =    phi10 = 1.0
   phi20 = 2.0
   r0[1] = 0.0
   r0[2] = 0.0
   r0[3] = 0.0
   q0[1] = 0.0
   q0[2] = 0.0
   q0[3] = 0.0
   q0[4] = 1.0

   rev1 = Revolute(
    phi = 1.0 rad
    w   = 0.0 rad/s
    a   = 0.0 rad/s^2
    tau = 0.0 N*m
   )

   rev2 = Revolute(
    phi = 2.0 rad
    w   = 0.0 rad/s
    a   = 0.0 rad/s^2
    tau = 0.0 N*m
   )

   frame = Revolute(
    r = [0.0, 0.0, 0.0] m
    q = [0.0, 0.0, 0.0, 1.0] 
    v = [0.0, 0.0, 0.0] m/s
    w = [0.0, 0.0, 0.0] rad/s
    a = [0.0, 0.0, 0.0] m/s^2
    z = [0.0, 0.0, 0.0] rad/s^2
    f = [0.0, 0.0, 0.0] N
    t = [0.0, 0.0, 0.0] N*m
   )
   )

... Print variables of robot2


variables: . Omitted printing of 11 columns
â”‚ Row â”‚ name        â”‚ ValueType                    â”‚ unit   â”‚ numericType â”‚
â”‚     â”‚ Symbol      â”‚ Symbol                       â”‚ String â”‚ ModiaMatâ€¦   â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ time        â”‚ Float64                      â”‚ s      â”‚ TIME        â”‚
â”‚ 2   â”‚ _dummy_x    â”‚ Float64                      â”‚        â”‚ XD_EXP      â”‚
â”‚ 3   â”‚ _dummy_derx â”‚ Float64                      â”‚        â”‚ DER_XD_EXP  â”‚
â”‚ 4   â”‚ rev1.phi    â”‚ Float64                      â”‚ rad    â”‚ WR          â”‚
â”‚ 5   â”‚ rev2.phi    â”‚ Float64                      â”‚ rad    â”‚ WR          â”‚
â”‚ 6   â”‚ frame.r     â”‚ SArray{Tuple{3},Float64,1,3} â”‚ m      â”‚ WR          â”‚
â”‚ 7   â”‚ frame.q     â”‚ SArray{Tuple{4},Float64,1,4} â”‚        â”‚ WR          â”‚


x vector: 
â”‚ Row â”‚ x      â”‚ name     â”‚ fixed â”‚ start  â”‚
â”‚     â”‚ Symbol â”‚ Symbol   â”‚ Bool  â”‚ Unionâ€¦ â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ x[1]   â”‚ _dummy_x â”‚ 1     â”‚ 0.0    â”‚


copy to variables: 
â”‚ Row â”‚ source â”‚ target   â”‚
â”‚     â”‚ Symbol â”‚ Symbol   â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ x[1]   â”‚ _dummy_x â”‚


copy to residue vector: 
â”‚ Row â”‚ source                â”‚ target     â”‚
â”‚     â”‚ Symbol                â”‚ Symbol     â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ derx[1] - _dummy_derx â”‚ residue[1] â”‚


copy to results: 
â”‚ Row â”‚ source   â”‚ target       â”‚ start                â”‚
â”‚     â”‚ Symbol   â”‚ Symbol       â”‚ Unionâ€¦               â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ time     â”‚ result[1]    â”‚ 0.0                  â”‚
â”‚ 2   â”‚ rev1.phi â”‚ result[2]    â”‚ 1.0                  â”‚
â”‚ 3   â”‚ rev2.phi â”‚ result[3]    â”‚ 2.0                  â”‚
â”‚ 4   â”‚ frame.r  â”‚ result[4:6]  â”‚ [0.0, 0.0, 0.0]      â”‚
â”‚ 5   â”‚ frame.q  â”‚ result[7:10] â”‚ [0.0, 0.0, 0.0, 1.0] â”‚

... Copy start values to x

... Copy x and der_x to variables

... Copy variables to residues

... robot3 =    phi10 = 1.0
   phi20 = 2.0
   phi30 = -2.0

   rev1 = Revolute(
    phi = 1.0 rad
    w   = 0.0 rad/s
    a   = 0.0 rad/s^2
    tau = 0.0 N*m
   )

   rev2 = Revolute(
    phi = 2.0 rad
    w   = 0.0 rad/s
    a   = 0.0 rad/s^2
    tau = 0.0 N*m
   )

   rev3 = Revolute(
    phi = -2.0 rad
    w   = 0.0 rad/s
    a   = 0.0 rad/s^2
    tau = 0.0 N*m
   )

   res1 = 0.0 
   )

... Print variables of robot3


variables: . Omitted printing of 9 columns
â”‚ Row â”‚ name     â”‚ ValueType â”‚ unit   â”‚ numericType â”‚ vec     â”‚ vecIndex â”‚
â”‚     â”‚ Symbol   â”‚ Symbol    â”‚ String â”‚ ModiaMatâ€¦   â”‚ Symbol  â”‚ Any      â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ time     â”‚ Float64   â”‚ s      â”‚ TIME        â”‚         â”‚ 0        â”‚
â”‚ 2   â”‚ rev1.phi â”‚ Float64   â”‚ rad    â”‚ WR          â”‚         â”‚ 0        â”‚
â”‚ 3   â”‚ rev2.phi â”‚ Float64   â”‚ rad    â”‚ WR          â”‚         â”‚ 0        â”‚
â”‚ 4   â”‚ rev3.phi â”‚ Float64   â”‚ rad    â”‚ XD_EXP      â”‚ x       â”‚ 1        â”‚
â”‚ 5   â”‚ res1     â”‚ Float64   â”‚        â”‚ FC          â”‚ residue â”‚ 1        â”‚


x vector: 
â”‚ Row â”‚ x      â”‚ name     â”‚ fixed â”‚ start  â”‚
â”‚     â”‚ Symbol â”‚ Symbol   â”‚ Bool  â”‚ Unionâ€¦ â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ x[1]   â”‚ rev3.phi â”‚ 1     â”‚ -2.0   â”‚


copy to variables: 
â”‚ Row â”‚ source â”‚ target   â”‚
â”‚     â”‚ Symbol â”‚ Symbol   â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ x[1]   â”‚ rev3.phi â”‚


copy to residue vector: 
â”‚ Row â”‚ source â”‚ target     â”‚
â”‚     â”‚ Symbol â”‚ Symbol     â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ res1   â”‚ residue[1] â”‚


copy to results: 
â”‚ Row â”‚ source   â”‚ target    â”‚ start  â”‚
â”‚     â”‚ Symbol   â”‚ Symbol    â”‚ Unionâ€¦ â”‚
â”œâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¤
â”‚ 1   â”‚ time     â”‚ result[1] â”‚ 0.0    â”‚
â”‚ 2   â”‚ rev1.phi â”‚ result[2] â”‚ 1.0    â”‚
â”‚ 3   â”‚ rev2.phi â”‚ result[3] â”‚ 2.0    â”‚
â”‚ 4   â”‚ rev3.phi â”‚ result[4] â”‚ -2.0   â”‚

... Copy start values to x

... Copy x and der_x to variables

... Copy variables to residues
t_end = 2.8284271247461903
path.t = [0.0, 1.4142135623730951, 2.8284271247461903]
... time = 0.0, rt = [1.0, 0.0, 0.0]
... time = 0.1, rt = [0.9, 0.1, 0.0]
... time = 0.2, rt = [0.8, 0.2, 0.0]
... time = 0.30000000000000004, rt = [0.7, 0.30000000000000004, 0.0]
... time = 0.4, rt = [0.6, 0.4, 0.0]
... time = 0.5, rt = [0.5, 0.5, 0.0]
... time = 0.6, rt = [0.4, 0.6, 0.0]
... time = 0.7, rt = [0.30000000000000004, 0.7, 0.0]
... time = 0.7999999999999999, rt = [0.20000000000000007, 0.7999999999999999, 0.0]
... time = 0.8999999999999999, rt = [0.10000000000000009, 0.8999999999999999, 0.0]
... time = 0.9999999999999999, rt = [1.1102230246251565e-16, 0.9999999999999999, 0.0]
... time = 1.0999999999999999, rt = [0.0, 0.9000000000000002, 0.0999999999999998]
... time = 1.2, rt = [0.0, 0.8, 0.1999999999999999]
... time = 1.3, rt = [0.0, 0.7, 0.3]
... time = 1.4000000000000001, rt = [0.0, 0.5999999999999999, 0.40000000000000013]
... time = 1.5000000000000002, rt = [0.0, 0.4999999999999999, 0.5000000000000001]
... time = 1.6000000000000003, rt = [0.0, 0.3999999999999998, 0.6000000000000002]
... time = 1.7000000000000004, rt = [0.0, 0.2999999999999997, 0.7000000000000003]
... time = 1.8000000000000005, rt = [0.0, 0.19999999999999962, 0.8000000000000004]
... time = 1.9000000000000006, rt = [0.0, 0.09999999999999953, 0.9000000000000005]
... time = 2.0000000000000004, rt = [0.0, -2.220446049250313e-16, 1.0000000000000002]

... Results of Solve_SingleNonlinearEquations:
fun1:
   analytical zero     = 1.0000000000000000e+00
   numerical zero      = 1.0000000000000000e+00
   absolute difference = 0.0000000000000000e+00

... Results of Solve_SingleNonlinearEquations:
fun2:
   analytical zero     = 6.4485440358400814e-01
   numerical zero      = 6.4485440358400814e-01
   absolute difference = 0.0000000000000000e+00

... Results of Solve_SingleNonlinearEquations:
fun3:
   analytical zero     = 6.9368474072202186e+00
   numerical zero      = 6.9368474072202186e+00
   absolute difference = 0.0000000000000000e+00
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Pendulum
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ phi    â”‚ 1.5708  â”‚ 1     â”‚ 1.0     â”‚
          â”‚ 2 â”‚ w      â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚

        for given x, compute der(x)
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_ExplicitDerivatives
        cpuTime        = 1.7 s (init: 0.9 s, integration: 0.77 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 0.0001
        nEquations     = 2
        nResults       = 501
        nSteps         = 142
        nResidues      = 237 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 25
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 6
        h0             = 5.8e-07 s
        hMin           = 5.8e-07 s
        hMax           = 0.069 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Pendulum
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ phi    â”‚ 1.0472  â”‚ 1     â”‚ 1.0     â”‚
          â”‚ 2 â”‚ w      â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 1.0e-8)
      Simulation started

      Simulation is terminated at time = 10.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.24 s (init: 0.23 s, integration: 0.0098 s)
        startTime      = 0.0 s
        stopTime       = 10.0 s
        interval       = 0.1 s
        tolerance      = 1.0e-8
        nEquations     = 2
        nResults       = 101
        nSteps         = 1408
        nResidues      = 1684 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 28
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 3
        h0             = 4.2e-11 s
        hMin           = 4.2e-11 s
        hMax           = 0.016 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Pendulum
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ phi    â”‚ 1.0472  â”‚ 1     â”‚ 1.0     â”‚
          â”‚ 2 â”‚ w      â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚

        for given x, compute der(x)
      Simulation started

      Simulation is terminated at time = 10.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_ExplicitDerivatives
        cpuTime        = 0.012 s (init: 0.00074 s, integration: 0.011 s)
        startTime      = 0.0 s
        stopTime       = 10.0 s
        interval       = 0.1 s
        tolerance      = 1.0e-8
        nEquations     = 2
        nResults       = 101
        nSteps         = 1408
        nResidues      = 1687 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 29
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 3
        h0             = 4.2e-11 s
        hMin           = 4.2e-11 s
        hMax           = 0.016 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: Pendulum
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ phi    â”‚ 1.0472  â”‚ 1     â”‚ 1.0     â”‚
          â”‚ 2 â”‚ w      â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      Simulation is terminated at time = 10.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.012 s (init: 0.00075 s, integration: 0.011 s)
        startTime      = 0.0 s
        stopTime       = 10.0 s
        interval       = 0.1 s
        tolerance      = 1.0e-8
        nEquations     = 2 (includes 0 constraints)
        nResults       = 101
        nSteps         = 1408
        nResidues      = 1684 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 28
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 3
        h0             = 4.2e-11 s
        hMin           = 4.2e-11 s
        hMax           = 0.016 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: FreeBodyRotation
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ q[1]   â”‚ 0.1     â”‚ 0     â”‚ 0.1     â”‚
          â”‚ 2 â”‚ q[2]   â”‚ 0.5     â”‚ 0     â”‚ 0.5     â”‚
          â”‚ 3 â”‚ q[3]   â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 4 â”‚ q[4]   â”‚ 1.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 5 â”‚ w[1]   â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚
          â”‚ 6 â”‚ w[2]   â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚
          â”‚ 7 â”‚ w[3]   â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            q[1] = 0.1 changed to 0.08908708957321489
            q[2] = 0.5 changed to 0.4454354478660758
            q[4] = 1.0 changed to 0.8908708957321516
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 1.3 s (init: 1.1 s, integration: 0.16 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 1.0e-6
        nEquations     = 7 (includes 1 constraints)
        nResults       = 501
        nSteps         = 601
        nResidues      = 1473 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 47
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 10
        h0             = 7.5e-08 s
        hMin           = 7.5e-08 s
        hMax           = 0.039 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: FreeBodyRotation
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ q[1]   â”‚ 0.1     â”‚ 0     â”‚ 0.1     â”‚
          â”‚ 2 â”‚ q[2]   â”‚ 0.5     â”‚ 0     â”‚ 0.5     â”‚
          â”‚ 3 â”‚ q[3]   â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 4 â”‚ q[4]   â”‚ 1.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 5 â”‚ w[1]   â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚
          â”‚ 6 â”‚ w[2]   â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚
          â”‚ 7 â”‚ w[3]   â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            q[1] = 0.1 changed to 0.0890870807438921
            q[2] = 0.5 changed to 0.4454354037194605
            q[4] = 1.0 changed to 0.890870807438921
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.25 s (init: 0.0032 s, integration: 0.25 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 1.0e-8
        nEquations     = 7 (includes 1 constraints)
        nResults       = 501
        nSteps         = 1292
        nResidues      = 2653 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 79
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 20
        h0             = 7.5e-10 s
        hMin           = 7.5e-10 s
        hMax           = 0.018 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: PendulumWithoutMacro
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ phi    â”‚ 1.5708  â”‚ 1     â”‚ 1.5708  â”‚
          â”‚ 2 â”‚ w      â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.02 s (init: 0.017 s, integration: 0.0034 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 0.0001
        nEquations     = 2 (includes 0 constraints)
        nResults       = 501
        nSteps         = 137
        nResidues      = 218 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 21
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 2
        h0             = 5.8e-07 s
        hMin           = 5.8e-07 s
        hMax           = 0.081 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: FreeBodyRotationWithoutMacro
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ q[1]   â”‚ 0.1     â”‚ 0     â”‚ 0.1     â”‚
          â”‚ 2 â”‚ q[2]   â”‚ 0.5     â”‚ 0     â”‚ 0.5     â”‚
          â”‚ 3 â”‚ q[3]   â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 4 â”‚ q[4]   â”‚ 1.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 5 â”‚ w[1]   â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚
          â”‚ 6 â”‚ w[2]   â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚
          â”‚ 7 â”‚ w[3]   â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            q[1] = 0.1 changed to 0.0890870807438921
            q[2] = 0.5 changed to 0.4454354037194605
            q[4] = 1.0 changed to 0.890870807438921
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.19 s (init: 0.15 s, integration: 0.044 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 1.0e-8
        nEquations     = 7 (includes 1 constraints)
        nResults       = 501
        nSteps         = 1247
        nResidues      = 2687 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 73
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 21
        h0             = 7.5e-10 s
        hMin           = 7.5e-10 s
        hMax           = 0.018 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: PendulumWithoutMacro
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ phi    â”‚ 1.0472  â”‚ 1     â”‚ 1.0472  â”‚
          â”‚ 2 â”‚ w      â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      Simulation is terminated at time = 10.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.0087 s (init: 0.00078 s, integration: 0.008 s)
        startTime      = 0.0 s
        stopTime       = 10.0 s
        interval       = 0.1 s
        tolerance      = 1.0e-8
        nEquations     = 2 (includes 0 constraints)
        nResults       = 101
        nSteps         = 1383
        nResidues      = 1673 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 28
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 3
        h0             = 4.2e-11 s
        hMin           = 4.2e-11 s
        hMax           = 0.016 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: FreeBodyRotationWithoutMacro
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ q[1]   â”‚ 0.1     â”‚ 0     â”‚ 0.1     â”‚
          â”‚ 2 â”‚ q[2]   â”‚ 0.5     â”‚ 0     â”‚ 0.5     â”‚
          â”‚ 3 â”‚ q[3]   â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 4 â”‚ q[4]   â”‚ 1.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 5 â”‚ w[1]   â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚
          â”‚ 6 â”‚ w[2]   â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚
          â”‚ 7 â”‚ w[3]   â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            q[1] = 0.1 changed to 0.0890870807438921
            q[2] = 0.5 changed to 0.4454354037194605
            q[4] = 1.0 changed to 0.890870807438921
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.043 s (init: 0.0017 s, integration: 0.041 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 1.0e-8
        nEquations     = 7 (includes 1 constraints)
        nResults       = 501
        nSteps         = 1247
        nResidues      = 2687 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 73
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 21
        h0             = 7.5e-10 s
        hMin           = 7.5e-10 s
        hMax           = 0.018 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: PT1
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ x[1]   â”‚ 1.5     â”‚ 0     â”‚ 1.5     â”‚

        for given x, compute der(x)
      Simulation started

      Simulation is terminated at time = 10.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_ExplicitDerivatives
        cpuTime        = 0.036 s (init: 0.036 s, integration: 0.00069 s)
        startTime      = 0.0 s
        stopTime       = 10.0 s
        interval       = 0.1 s
        tolerance      = 1.0e-8
        nEquations     = 1
        nResults       = 101
        nSteps         = 147
        nResidues      = 199 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 24
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 1
        h0             = 1.1e-08 s
        hMin           = 1.1e-08 s
        hMax           = 0.17 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: PT1
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ x[1]   â”‚ 1.5     â”‚ 0     â”‚ 1.5     â”‚

        for given x, compute der(x)
      Simulation started

      Simulation is terminated at time = 10.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_ExplicitDerivatives
        cpuTime        = 0.23 s (init: 0.16 s, integration: 0.065 s)
        startTime      = 0.0 s
        stopTime       = 10.0 s
        interval       = 0.02 s
        tolerance      = 0.0001
        nEquations     = 1
        nResults       = 501
        nSteps         = 55
        nResidues      = 77 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 14
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 1
        h0             = 2e-05 s
        hMin           = 2e-05 s
        hMax           = 0.46 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: PendulumODE
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ phi    â”‚ 1.5708  â”‚ 0     â”‚ 1.5708  â”‚
          â”‚ 2 â”‚ w      â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚

        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.29 s (init: 0.24 s, integration: 0.048 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 0.0001
        nEquations     = 2 (includes 0 constraints)
        nResults       = 501
        nSteps         = 137
        nResidues      = 218 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 21
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 2
        h0             = 5.8e-07 s
        hMin           = 5.8e-07 s
        hMax           = 0.081 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: PendulumDAE
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name       â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ x          â”‚ 0.5     â”‚ 0     â”‚ 0.5     â”‚
          â”‚ 2 â”‚ y          â”‚ -0.5    â”‚ 0     â”‚ 0.5     â”‚
          â”‚ 3 â”‚ vx         â”‚ 1.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 4 â”‚ vy         â”‚ 1.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 5 â”‚ lambda_int â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 6 â”‚ mue_int    â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            x = 0.5 changed to 0.7071067813735292
            y = -0.5 changed to -0.7071067813794369
            mue_int = 0.0 changed to -0.2928932325494339
        compute der(x) with Jacobian that is constructed with model provided constraint derivatives (der(fc))
      Simulation started

      Simulation is terminated at time = 2.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.38 s (init: 0.32 s, integration: 0.061 s)
        startTime      = 0.0 s
        stopTime       = 2.0 s
        interval       = 0.004 s
        tolerance      = 0.0001
        nEquations     = 6 (includes 2 constraints)
        nResults       = 501
        nSteps         = 157
        nResidues      = 418 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 27
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 4
        h0             = 1.4e-06 s
        hMin           = 1.4e-06 s
        hMax           = 0.027 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: FreeBodyRotation
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ Q[1]   â”‚ 0.1     â”‚ 0     â”‚ 0.1     â”‚
          â”‚ 2 â”‚ Q[2]   â”‚ 0.5     â”‚ 0     â”‚ 0.5     â”‚
          â”‚ 3 â”‚ Q[3]   â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 4 â”‚ Q[4]   â”‚ 1.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 5 â”‚ w[1]   â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 6 â”‚ w[2]   â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 7 â”‚ w[3]   â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚

        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            Q[1] = 0.1 changed to 0.0890878309896849
            Q[2] = 0.5 changed to 0.4454391549485386
            Q[4] = 1.0 changed to 0.8908783098970772
      Simulation started

      Simulation is terminated at time = 5.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.44 s (init: 0.36 s, integration: 0.08 s)
        startTime      = 0.0 s
        stopTime       = 5.0 s
        interval       = 0.01 s
        tolerance      = 0.0001
        nEquations     = 7 (includes 1 constraints)
        nResults       = 501
        nSteps         = 278
        nResidues      = 745 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 31
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 7
        h0             = 7.5e-06 s
        hMin           = 7.5e-06 s
        hMax           = 0.056 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: StateSelection
      Initialization at time = 0.0 s
        initial values:
          â”‚ x  â”‚ name         â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1  â”‚ s            â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚
          â”‚ 2  â”‚ f[1]         â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 3  â”‚ f[2]         â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 4  â”‚ f[3]         â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 5  â”‚ sd           â”‚ 0.0     â”‚ 1     â”‚ 1.0     â”‚
          â”‚ 6  â”‚ der_der_r[1] â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 7  â”‚ der_der_r[2] â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 8  â”‚ der_der_r[3] â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 9  â”‚ der_der_s    â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 10 â”‚ der_v[1]     â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 11 â”‚ der_v[2]     â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 12 â”‚ der_v[3]     â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚

        determine consistent DAE variables x,der(x) (with implicit Euler step; step size = 0.0001)
            f[3] = 0.0 changed to 9.81
      Simulation started

      Simulation is terminated at time = 1.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_NoSpecialStructure
        cpuTime        = 0.38 s (init: 0.32 s, integration: 0.062 s)
        startTime      = 0.0 s
        stopTime       = 1.0 s
        interval       = 0.002 s
        tolerance      = 0.0001
        nEquations     = 12
        nResults       = 501
        nSteps         = 27
        nResidues      = 316 (includes residue calls for Jacobian)
        nZeroCrossings = 0
        nJac           = 24
        nTimeEvents    = 0
        nStateEvents   = 0
        nRestartEvents = 0
        nErrTestFails  = 0
        h0             = 1.7e-08 s
        hMin           = 1.7e-08 s
        hMax           = 0.41 s
        orderMax       = 2
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: SimpleStateEvents
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ s      â”‚ 2.0     â”‚ 0     â”‚ 2.0     â”‚
          â”‚ 2 â”‚ v      â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚

        s = 2.0 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      State event (zero-crossing) at time = 1.6228001444219327 s (z[1] < 0)
        s = -1.0044456777026105e-14 (became <= 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 3.367874624802094 s (z[1] > 0)
        s = 6.158566664721688e-14 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 6.513310743445715 s (z[1] < 0)
        s = -1.2269646798947816e-13 (became <= 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 8.041847236698713 s (z[1] > 0)
        s = 1.8866428997662215e-13 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      Simulation is terminated at time = 10.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.39 s (init: 0.23 s, integration: 0.16 s)
        startTime      = 0.0 s
        stopTime       = 10.0 s
        interval       = 0.02 s
        tolerance      = 0.0001
        nEquations     = 2 (includes 0 constraints)
        nResults       = 509
        nSteps         = 181
        nResidues      = 363 (includes residue calls for Jacobian)
        nZeroCrossings = 721
        nJac           = 70
        nTimeEvents    = 0
        nStateEvents   = 4
        nRestartEvents = 4
        nErrTestFails  = 1
        h0             = 3.5e-06 s
        hMin           = 3.5e-06 s
        hMax           = 0.26 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: BouncingBall
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name   â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ h      â”‚ 1.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 2 â”‚ v      â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚

        flying = true
        -h = -1.0 (became <= 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
      Simulation started

      State event (zero-crossing) at time = 0.45152364095728476 s (z[1] > 0)
        -h = 6.766809335090329e-14 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 1.0836567379347877 s (z[1] > 0)
        -h = 1.4251100299844666e-13 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 1.5261499050367457 s (z[1] > 0)
        -h = 5.5719318048375044e-14 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 1.8358951198266975 s (z[1] > 0)
        -h = 4.279215870539588e-14 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.05271676890868 s (z[1] > 0)
        -h = 2.6754206489121302e-14 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.2044919175628794 s (z[1] > 0)
        -h = 1.0061396160665481e-16 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.3107345138036663 s (z[1] > 0)
        -h = 1.3860006892185694e-14 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.3851043238536502 s (z[1] > 0)
        -h = 5.289605559122279e-15 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.437163183747697 s (z[1] > 0)
        -h = 7.214931777022038e-15 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.473604379573165 s (z[1] > 0)
        -h = 6.7220534694101275e-18 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.4991132112013146 s (z[1] > 0)
        -h = 3.4830943467997755e-15 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.516969388176662 s (z[1] > 0)
        -h = 1.0408340855860843e-17 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.5294687068842765 s (z[1] > 0)
        -h = 1.8260268514272426e-15 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.5382182245244422 s (z[1] > 0)
        -h = 1.219625800092522e-15 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.544342880797123 s (z[1] > 0)
        -h = 8.764351549193916e-16 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.548630133127159 s (z[1] > 0)
        -h = 5.862213383993342e-16 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.5516312012257574 s (z[1] > 0)
        -h = 4.0704507093484305e-16 (became > 0)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      State event (zero-crossing) at time = 2.553731938274084 s (z[1] > 0)
        -h = 3.7880118082512203e-16 (became > 0)
        flying = false
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        for given x, determine consistent DAE variables der(x) (solving a linear equation system)
        restart = Restart

      Simulation is terminated at time = 3.0 s

      BouncingBall model is terminated (flying = false)

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.4 s (init: 0.26 s, integration: 0.14 s)
        startTime      = 0.0 s
        stopTime       = 3.0 s
        interval       = 0.006 s
        tolerance      = 0.0001
        nEquations     = 2 (includes 0 constraints)
        nResults       = 537
        nSteps         = 313
        nResidues      = 861 (includes residue calls for Jacobian)
        nZeroCrossings = 1017
        nJac           = 274
        nTimeEvents    = 0
        nStateEvents   = 18
        nRestartEvents = 18
        nErrTestFails  = 0
        h0             = 1e-07 s
        hMin           = 1e-07 s
        hMax           = 0.59 s
        orderMax       = 3
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
... ModiaMath.simulate! (version 0.5.2 2019-07-10) to simulate model: IdealClutch
      Initialization at time = 0.0 s
        initial values:
          â”‚ x â”‚ name                 â”‚ start   â”‚ fixed â”‚ nominal â”‚
          â”œâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
          â”‚ 1 â”‚ inertia1.w           â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚
          â”‚ 2 â”‚ inertia2.w           â”‚ 10.0    â”‚ 0     â”‚ 10.0    â”‚
          â”‚ 3 â”‚ integral(clutch.tau) â”‚ 0.0     â”‚ 0     â”‚ 1.0     â”‚

        nextEventTime = 100 s, integrateToEvent = true
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            inertia1.w = 0.0 changed to 6.400000003814697
            inertia2.w = 10.0 changed to 6.400000003814697
            integral(clutch.tau) = 0.0 changed to -1.4399999984741212
      Simulation started

      Time event at time = 100.0 s
        nextEventTime = 300 s, integrateToEvent = true
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
        restart = Restart

      Time event at time = 300.0 s
        determine consistent DAE variables x,der(x) (with analytical integral over time instant)
            inertia1.w = 39.95300327936998 changed to 32.072047154948535
            inertia2.w = 27.63900929577123 changed to 32.072047139246486
            integral(clutch.tau) = 7.055603718308493 changed to 8.828818845841806
        restart = Restart

      Simulation is terminated at time = 500.0 s

      Statistics (get help with ?ModiaMath.SimulationStatistics):
        structureOfDAE = DAE_LinearDerivativesAndConstraints
        cpuTime        = 0.39 s (init: 0.29 s, integration: 0.1 s)
        startTime      = 0.0 s
        stopTime       = 500.0 s
        interval       = 1.0 s
        tolerance      = 0.0001
        nEquations     = 3 (includes 1 constraints)
        nResults       = 503
        nSteps         = 100
        nResidues      = 255 (includes residue calls for Jacobian)
        nZeroCrossings = 600
        nJac           = 41
        nTimeEvents    = 2
        nStateEvents   = 0
        nRestartEvents = 2
        nErrTestFails  = 2
        h0             = 0.00078 s
        hMin           = 0.00078 s
        hMax           = 24 s
        orderMax       = 5
        sparseSolver   = false
... ModiaMath.plot(..): Call is ignored, since PyPlot not available.
w1_end = 38.927746656551946, w2_end = 38.92774665655194

... close all open figures.
Test Summary:  | Pass  Total
Test ModiaMath |  119    119
    Testing ModiaMath tests passed 
